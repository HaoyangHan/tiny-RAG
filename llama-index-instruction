# RAG中的Ingestion与Metadata Extraction (LlamaIndex)

在构建RAG(检索增强生成)系统时，数据摄取(ingestion)和元数据提取(metadata extraction)是关键步骤。以下是使用LlamaIndex实现这些功能的指南：

## 1. 数据摄取(Ingestion)

数据摄取是将原始数据转化为可检索格式的过程，LlamaIndex提供了多种工具来完成这一过程。

### 基本摄取流程

```python
from llama_index.core import SimpleDirectoryReader, VectorStoreIndex
from llama_index.core.node_parser import SentenceSplitter

# 1. 加载文档
documents = SimpleDirectoryReader("data/").load_data()

# 2. 文档分块
parser = SentenceSplitter(chunk_size=512, chunk_overlap=20)
nodes = parser.get_nodes_from_documents(documents)

# 3. 创建索引
index = VectorStoreIndex(nodes)
```

### 高级摄取选项

```python
from llama_index.core import Settings
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.llms.openai import OpenAI

# 配置LLM和嵌入模型
Settings.llm = OpenAI(model="gpt-3.5-turbo")
Settings.embed_model = OpenAIEmbedding(model="text-embedding-3-small")

# 带元数据的高级摄取
index = VectorStoreIndex.from_documents(
    documents,
    transformations=[
        SentenceSplitter(chunk_size=512, chunk_overlap=20),
        # 可以添加其他转换
    ],
    show_progress=True
)
```

## 2. 元数据提取(Metadata Extraction)

元数据提取是为文档添加结构化信息的过程，有助于更精确的检索。

### 基本元数据提取

```python
from llama_index.core import Document

doc = Document(
    text="这是文档内容...",
    metadata={
        "source": "data/file1.pdf",
        "created_date": "2023-01-01",
        "author": "张三"
    }
)
```

### 自动元数据提取

```python
from llama_index.core.extractors import (
    TitleExtractor,
    QuestionsAnsweredExtractor,
    KeywordExtractor
)

# 创建元数据提取器
title_extractor = TitleExtractor(nodes=5)
qa_extractor = QuestionsAnsweredExtractor(questions=3)
keyword_extractor = KeywordExtractor(keywords=5)

# 应用到文档
metadata_extractors = [title_extractor, qa_extractor, keyword_extractor]

for extractor in metadata_extractors:
    metadata = extractor.extract([doc])
    doc.metadata.update(metadata[0])
```

### 使用LLM进行高级元数据提取

```python
from llama_index.core.extractors import SummaryExtractor
from llama_index.core.schema import MetadataMode

# 摘要提取器
summary_extractor = SummaryExtractor(
    summaries=["self", "prev", "next"]
)

# 提取摘要
metadata = summary_extractor.extract([doc])

# 查看提取的元数据
print(doc.get_content(metadata_mode=MetadataMode.ALL))
```

## 3. 结合摄取与元数据提取

```python
from llama_index.core.ingestion import IngestionPipeline

# 创建处理管道
pipeline = IngestionPipeline(
    transformations=[
        SentenceSplitter(chunk_size=512, chunk_overlap=20),
        TitleExtractor(nodes=5),
        QuestionsAnsweredExtractor(questions=3),
        KeywordExtractor(keywords=5),
        SummaryExtractor(summaries=["self"])
    ]
)

# 运行管道
nodes = pipeline.run(documents=documents)

# 创建带丰富元数据的索引
index = VectorStoreIndex(nodes)
```

## 4. 自定义元数据提取器

```python
from llama_index.core.extractors import BaseExtractor
from typing import List

class CustomMetadataExtractor(BaseExtractor):
    def extract(self, nodes: List[Node]) -> List[Dict]:
        metadata_list = []
        for node in nodes:
            # 实现自定义提取逻辑
            metadata = {
                "custom_field": len(node.text),
                "contains_important": "重要" in node.text
            }
            metadata_list.append(metadata)
        return metadata_list

# 使用自定义提取器
custom_extractor = CustomMetadataExtractor()
pipeline = IngestionPipeline(transformations=[..., custom_extractor])
```

## 最佳实践

1. **分块策略**：根据内容类型调整分块大小，技术文档可能需要更大的块
2. **元数据选择**：只提取对检索真正有用的元数据，避免过度处理
3. **增量摄取**：对于频繁更新的数据源，实现增量摄取
4. **元数据验证**：定期检查提取的元数据质量

通过合理设计摄取流程和元数据提取策略，可以显著提升RAG系统的检索质量和响应准确性。