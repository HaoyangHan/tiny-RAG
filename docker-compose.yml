services:
  # MongoDB Database
  tinyrag-mongodb:
    image: mongo:7.0
    container_name: tinyrag-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: tinyrag
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - tinyrag-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  tinyrag-redis:
    image: redis:7.2-alpine
    container_name: tinyrag-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tinyrag-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Vector Database (Qdrant)
  tinyrag-qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: tinyrag-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - tinyrag-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # RAG Core Library Worker
  tinyrag-worker:
    build:
      context: ./rag-memo-core-lib
      dockerfile: Dockerfile
    container_name: tinyrag-worker
    restart: unless-stopped
    environment:
      # Database connections
      MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@tinyrag-mongodb:27017/tinyrag?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@tinyrag-redis:6379
      QDRANT_URL: http://tinyrag-qdrant:6333
      
      # LLM Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_BASE_URL: ${GEMINI_BASE_URL:-https://api.openai-proxy.org/google}
      LLM_MODEL: ${LLM_MODEL:-gpt-4o-mini}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      
      # Worker settings
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
      ENABLE_METADATA_EXTRACTION: ${ENABLE_METADATA_EXTRACTION:-true}
      ENABLE_ENHANCED_RERANKING: ${ENABLE_ENHANCED_RERANKING:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      tinyrag-mongodb:
        condition: service_healthy
      tinyrag-redis:
        condition: service_healthy
      tinyrag-qdrant:
        condition: service_healthy
    networks:
      - tinyrag-network
    volumes:
      - ./data/uploads:/app/uploads
      - ./logs:/app/logs

  # API Backend
  tinyrag-api:
    build:
      context: .
      dockerfile: ./rag-memo-api/Dockerfile
    container_name: tinyrag-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database connections
      MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@tinyrag-mongodb:27017/tinyrag?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@tinyrag-redis:6379
      QDRANT_URL: http://tinyrag-qdrant:6333
      
      # Authentication
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # Default admin user
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL:-admin@tinyrag.local}
      DEFAULT_ADMIN_USERNAME: ${DEFAULT_ADMIN_USERNAME:-admin}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-TinyRAG2024!}
      
      # LLM Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_BASE_URL: ${GEMINI_BASE_URL:-https://api.openai-proxy.org/google}
      LLM_MODEL: ${LLM_MODEL:-gpt-4o-mini}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      
      # CORS and security
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      
      # Features
      ENABLE_METADATA_EXTRACTION: ${ENABLE_METADATA_EXTRACTION:-true}
      ENABLE_ENHANCED_RERANKING: ${ENABLE_ENHANCED_RERANKING:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
    depends_on:
      tinyrag-mongodb:
        condition: service_healthy
      tinyrag-redis:
        condition: service_healthy
      tinyrag-qdrant:
        condition: service_healthy
      tinyrag-worker:
        condition: service_started
    networks:
      - tinyrag-network
    volumes:
      - ./data/uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend UI
  tinyrag-ui:
    build:
      context: ./rag-memo-ui
      dockerfile: Dockerfile
    container_name: tinyrag-ui
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # API configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-TinyRAG}
      NEXT_PUBLIC_APP_VERSION: ${NEXT_PUBLIC_APP_VERSION:-1.3.0}
      
      # Authentication
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-change-in-production}
      
      # Features
      NEXT_PUBLIC_ENABLE_AUTH: ${NEXT_PUBLIC_ENABLE_AUTH:-true}
      NEXT_PUBLIC_ENABLE_METADATA: ${NEXT_PUBLIC_ENABLE_METADATA:-true}
      
      # Development
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      tinyrag-api:
        condition: service_healthy
    networks:
      - tinyrag-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Nginx Reverse Proxy (Production)
  tinyrag-nginx:
    image: nginx:1.25-alpine
    container_name: tinyrag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      tinyrag-api:
        condition: service_healthy
      tinyrag-ui:
        condition: service_healthy
    networks:
      - tinyrag-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  tinyrag-network:
    driver: bridge 